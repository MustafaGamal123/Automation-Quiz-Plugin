window.isCameraAllowed = window.isCameraAllowed || false;

define("quizaccess_proctoring/proctoring", ["jquery", "core/ajax", "core/notification", "core/str"], 
function($, Ajax, Notification, Str) {
    
    // Load localized strings
    const loadStrings = async function() {
        const stringkeys = [
            {key: "facenotfoundoncam", component: "quizaccess_proctoring"},
            {key: "wrong_during_taking_image", component: "quizaccess_proctoring"},
            {key: "wrong_during_taking_screenshot", component: "quizaccess_proctoring"},
            {key: "enable_web_camera_before_submitting", component: "quizaccess_proctoring"},
            {key: "webcam", component: "quizaccess_proctoring"},
            {key: "videonotavailable", component: "quizaccess_proctoring"}
        ];
        
        try {
            const strings = await Str.get_strings(stringkeys);
            return {
                facenotfoundoncam: strings[0],
                wrongduringtakingimage: strings[1],
                wrongduringtakingscreenshot: strings[2],
                enablewebcamerabeforesubmitting: strings[3],
                webcam: strings[4],
                videonotavailable: strings[5]
            };
        } catch (error) {
            Notification.exception(error);
            return {};
        }
    };

    // Hide buttons when camera is not allowed
    async function hideButtons() {
        const strings = await loadStrings();
        $(".mod_quiz-next-nav").prop("disabled", true);
        $(".submitbtns").html(
            '<p class="text text-red red">' + 
            strings.enablewebcamerabeforesubmitting + 
            '</p>'
        );
    }

    // Remove notification alerts
    const removeNotifications = () => {
        try {
            const alertElements = document.getElementsByClassName("alert");
            if (alertElements.length > 0) {
                Array.from(alertElements).forEach(alertDiv => {
                    alertDiv.style.display = "none";
                });
            }
        } catch (error) {
            Notification.exception(error);
        }
    };

    // Face detection function
    const detectface = async (input, croppedImage) => {
        const output = await faceapi.detectAllFaces(input);
        
        if (output.length !== 0) {
            let detections = output[0].box;
            
            const regionsToExtract = [
                new faceapi.Rect(detections.x, detections.y, detections.width, detections.height)
            ];
            
            let faceImages = await faceapi.extractFaces(input, regionsToExtract);
            
            if (faceImages.length !== 0) {
                faceImages.forEach(cnv => {
                    croppedImage.src = cnv.toDataURL();
                });
            }
        }
    };

    // Make video element draggable
    const makeDraggable = (element) => {
        let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
        
        const elementDrag = (e) => {
            e.preventDefault();
            pos1 = pos3 - e.clientX;
            pos2 = pos4 - e.clientY;
            pos3 = e.clientX;
            pos4 = e.clientY;
            element.style.top = (element.offsetTop - pos2) + "px";
            element.style.left = (element.offsetLeft - pos1) + "px";
        };
        
        const closeDragElement = () => {
            document.onmouseup = null;
            document.onmousemove = null;
        };
        
        element.onmousedown = (e) => {
            e.preventDefault();
            pos3 = e.clientX;
            pos4 = e.clientY;
            document.onmouseup = closeDragElement;
            document.onmousemove = elementDrag;
        };
    };

    // Initialize submit button state
    const initializeSubmitButton = () => {
        $("#id_submitbutton").prop("disabled", true);
        
        $(function() {
            $("#id_proctoring").on("change", function() {
                const isEnabled = this.checked && isCameraAllowed;
                $("#id_submitbutton").prop("disabled", !isEnabled);
            });
        });
    };

    return {
        // Main setup function
        async setup(props, modelurl) {
            const strings = await loadStrings();
            let takepicturedelay = props.camshotdelay || 30000;

            // Load face detection model if provided
            if (modelurl !== null) {
                await faceapi.nets.ssdMobilenetv1.loadFromUri(modelurl);
            }

            // Don't run on summary or review pages
            const summaryPage = document.getElementById("page-mod-quiz-summary");
            const reviewPage = document.getElementById("page-mod-quiz-review");
            
            if ((summaryPage && summaryPage.innerHTML.length) || 
                (reviewPage && reviewPage.innerHTML.length)) {
                return false;
            }

            const width = props.image_width;
            let height = 0;
            let streaming = false;
            let data = null;

            // Create webcam interface
            $("body").append(
                '<div class="proctoring-fixed-webcam-box d-flex">' +
                    '<video id="video">' + strings.videonotavailable + '</video>' +
                    '<img id="cropimg" src="" alt=""/>' +
                    '<canvas id="canvas" style="display:none;"></canvas>' +
                    '<div class="output" style="display:none;">' +
                        '<img id="photo" alt="The picture will appear in this box."/>' +
                    '</div>' +
                '</div>'
            );

            const video = document.getElementById("video");
            const canvas = document.getElementById("canvas");
            const photo = document.getElementById("photo");

            // Make video draggable
            makeDraggable(video);

            // Take picture function
            const takepicture = async () => {
                const context = canvas.getContext("2d");
                
                if (width && height) {
                    canvas.width = width;
                    canvas.height = height;
                    context.drawImage(video, 0, 0, width, height);
                    data = canvas.toDataURL("image/png");
                    photo.setAttribute("src", data);
                    props.webcampicture = data;

                    let faceFound = 0;
                    let faceImage = "";
                    let croppedImage = $("#cropimg");

                    // Detect face if model is loaded
                    if (modelurl !== null) {
                        await detectface(photo, croppedImage);
                        
                        if (croppedImage.attr('src')) {
                            removeNotifications();
                            faceFound = 1;
                            faceImage = croppedImage.attr('src');
                        } else {
  
                            faceFound = 0;
                            faceImage = "";
                        }
                    }

                    // Send image to server
                    const request = {
                        methodname: "quizaccess_proctoring_send_camshot",
                        args: {
                            courseid: props.courseid,
                            screenshotid: props.id,
                            quizid: props.quizid,
                            webcampicture: data,
                            imagetype: 1,
                            parenttype: "camshot_image",
                            faceimage: faceImage,
                            facefound: faceFound
                        }
                    };

                    Ajax.call([request])[0]
                        .done(function(res) {
                            if (res.warnings && res.warnings.length >= 1) {
                                Notification.addNotification({
                                    message: strings.wrongduringtakingimage,
                                    type: "error"
                                });
                            }
                        })
                        .fail(Notification.exception);
                } else {
                    // Clear photo if dimensions not available
                    context.fillStyle = "#AAA";
                    context.fillRect(0, 0, canvas.width, canvas.height);
                    data = canvas.toDataURL("image/png");
                    photo.setAttribute("src", data);
                }
            };

            // Request camera access
            navigator.mediaDevices.getUserMedia({video: true, audio: false})
                .then(function(stream) {
                    video.srcObject = stream;
                    video.play();
                    isCameraAllowed = true;
                })
                .catch(function(error) {
                    console.error("Camera access error:", error);
                    hideButtons();
                });

            if (video) {
                // Set up video dimensions when ready
                video.addEventListener("canplay", function() {
                    if (!streaming) {
                        height = video.videoHeight / (video.videoWidth / width);
                        
                        if (isNaN(height)) {
                            height = width / (4/3);
                        }
                        
                        video.setAttribute("width", width);
                        video.setAttribute("height", height);
                        canvas.setAttribute("width", width);
                        canvas.setAttribute("height", height);
                        streaming = true;
                    }
                }, false);

                // Manual picture on click
                video.addEventListener("click", async function(ev) {
                    await takepicture();
                    ev.preventDefault();
                }, false);

                // Auto capture pictures
                setTimeout(takepicture, 3000); // First capture after 3 seconds
                setInterval(takepicture, takepicturedelay); // Regular captures
            } else {
                hideButtons();
            }

            // Initialize submit button
            initializeSubmitButton();

            return true;
        },

        // Alternative init function
        async init(props) {
            let height = 0;
            let streaming = false;
            let video = null;
            let canvas = null;
            let photo = null;
            let data = null;
            const width = props.image_width;

            function clearphoto() {
                if (isCameraAllowed) {
                    const context = canvas.getContext("2d");
                    context.fillStyle = "#AAA";
                    context.fillRect(0, 0, canvas.width, canvas.height);
                    data = canvas.toDataURL("image/png");
                    photo.setAttribute("src", data);
                } else {
                    hideButtons();
                }
            }

            // Initialize video elements
            video = document.getElementById("video");
            canvas = document.getElementById("canvas");
            photo = document.getElementById("photo");

            if (video) {
                // Request camera access
                navigator.mediaDevices.getUserMedia({video: true, audio: false})
                    .then(function(stream) {
                        video.srcObject = stream;
                        video.play();
                        isCameraAllowed = true;
                        Notification.addNotification({
                            message: props.cameraallow,
                            type: "success"
                        });
                    })
                    .catch(function(error) {
                        console.error("Camera access error:", error);
                        Notification.addNotification({
                            message: props.allowcamerawarning,
                            type: "warning"
                        });
                        hideButtons();
                    });

                // Set up video dimensions
                video.addEventListener("canplay", function() {
                    if (!streaming) {
                        height = video.videoHeight / (video.videoWidth / width);
                        
                        if (isNaN(height)) {
                            height = width / (4/3);
                        }
                        
                        video.setAttribute("width", width);
                        video.setAttribute("height", height);
                        canvas.setAttribute("width", width);
                        canvas.setAttribute("height", height);
                        streaming = true;
                    }
                }, false);

                // Take screenshot on click
                video.addEventListener("click", async function(ev) {
                    const strings = await loadStrings();
                    const context = canvas.getContext("2d");
                    
                    if (width && height) {
                        $(document).trigger("screenshoottaken");
                        canvas.width = width;
                        canvas.height = height;
                        context.drawImage(video, 0, 0, width, height);
                        data = canvas.toDataURL("image/png");
                        photo.setAttribute("src", data);

                        const request = {
                            methodname: "quizaccess_proctoring_send_camshot",
                            args: {
                                courseid: props.courseid,
                                screenshotid: props.id,
                                quizid: props.quizid,
                                webcampicture: data,
                                imagetype: 1
                            }
                        };

                        Ajax.call([request])[0]
                            .done(async function(res) {
                                if (res.warnings && res.warnings.length >= 1) {
                                    Notification.addNotification({
                                        message: strings.wrongduringtakingscreenshot,
                                        type: "error"
                                    });
                                }
                            })
                            .fail(Notification.exception);
                    } else {
                        clearphoto();
                    }
                    
                    ev.preventDefault();
                }, false);
            } else {
                hideButtons();
            }

            clearphoto();
            return data;
        }
    };
});